'use strict';

// routes/job_routes.js
var mongo = require('mongodb');
var murror = require('../tools/murror');
var user = "test";

module.exports = function (app, dbclient) {
  app.get('/jobs/count', function (req, res) {
    //get jobs count
    dbclient.db('peon').collection('job').count(req.body, function (err, count) {
      if (err) {
        res.status(500).send({ error: "Not able to process" });
      } else {
        res.status(200).send({ count: count });
      }
    });
  });
  app.get('/jobs', function (req, res) {
    //get all jobs
    dbclient.db('peon').collection('job').find(req.body).toArray(function (err, result) {
      if (err) {
        res.status(500).send({ error: "Not able to process" });
      } else {
        res.status(200).send(result);
      }
    });
  });
  app.get('/jobs/:id', function (req, res) {
    //get job by id
    var where = { '_id': new mongo.ObjectID(req.params.id) };
    murror.checkErrorList();
    dbclient.db('peon').collection('job').findOne(where, function (err, item) {
      if (err) {
        res.status(500).send({ error: "Not able to process" });
      } else {
        res.status(200).send(item);
      }
    });
  });
  app.post('/jobs', function (req, res) {
    //create new job
    try {
      var job = req.body;
      if (!(typeof job.name === "string")) murror.addError("Parameter 'name' should be string");
      if (!(typeof job.description === "string")) murror.addError("Parameter 'description' should be a string");
      if (!(typeof job.enabled === "boolean")) murror.addError("Parameter 'enabled' should be a boolean");
      job.createdOn = Date.now();
      job.createdBy = user;
      job.modifiedOn = Date.now();
      job.modifiedBy = user;

      murror.checkErrorList();
      dbclient.db('peon').collection('job').insert(job, function (err, result) {
        if (err) {
          res.status(500).send({ error: err });
        } else {
          res.status(201).send(result.ops[0]);
        }
      });
    } catch (e) {
      res.status(500).send({ error: e.message });
    }
  });
  app.post('/jobs/:id', function (req, res) {
    res.sendStatus(405);
  });
  app.put('/jobs/:id', function (req, res) {
    //update job by _id
    var job = req.body;
    var where = { '_id': new mongo.ObjectID(req.params.id) };
    var newvalues = req.body;
    if (!(typeof job.name === "string")) murror.addError("Parameter 'name' should be string");
    if (!(typeof job.description === "string")) murror.addError("Parameter 'description' should be a string");
    if (!(typeof job.enabled === "boolean")) murror.addError("Parameter 'enabled' should be a boolean");

    murror.checkErrorList();
    newvalues.modifiedOn = Date.now();
    newvalues.modifiedBy = user;
    var update = { $set: newvalues };

    dbclient.db('peon').collection('job').updateOne(where, update, function (err, result) {
      if (err) {
        res.status(500).send({ error: "Not able to process" });
      } else {
        res.status(200).send({ itemsUpdated: result.result.n });
      }
    });
  });
  app.delete('/jobs/:id', function (req, res) {
    //delete job by _id
    var where = { '_id': new mongo.ObjectID(req.params.id) };
    dbclient.db('peon').collection('job').deleteOne(where, function (err, result) {
      if (err) {
        res.status(500).send({ error: "Not able to process" });
      } else {
        res.status(200).send({ itemsDeleted: result.result.n });
      }
    });
  });
};
//TODO
//user handling
//return multiple errors
//selectors for job list - protect from injection
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpvYl9yb3V0ZXMuanMiXSwibmFtZXMiOlsibW9uZ28iLCJyZXF1aXJlIiwibXVycm9yIiwidXNlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJkYmNsaWVudCIsImdldCIsInJlcSIsInJlcyIsImRiIiwiY29sbGVjdGlvbiIsImNvdW50IiwiYm9keSIsImVyciIsInN0YXR1cyIsInNlbmQiLCJlcnJvciIsImZpbmQiLCJ0b0FycmF5IiwicmVzdWx0Iiwid2hlcmUiLCJPYmplY3RJRCIsInBhcmFtcyIsImlkIiwiY2hlY2tFcnJvckxpc3QiLCJmaW5kT25lIiwiaXRlbSIsInBvc3QiLCJqb2IiLCJuYW1lIiwiYWRkRXJyb3IiLCJkZXNjcmlwdGlvbiIsImVuYWJsZWQiLCJjcmVhdGVkT24iLCJEYXRlIiwibm93IiwiY3JlYXRlZEJ5IiwibW9kaWZpZWRPbiIsIm1vZGlmaWVkQnkiLCJpbnNlcnQiLCJvcHMiLCJlIiwibWVzc2FnZSIsInNlbmRTdGF0dXMiLCJwdXQiLCJuZXd2YWx1ZXMiLCJ1cGRhdGUiLCIkc2V0IiwidXBkYXRlT25lIiwiaXRlbXNVcGRhdGVkIiwibiIsImRlbGV0ZSIsImRlbGV0ZU9uZSIsIml0ZW1zRGVsZXRlZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLElBQUlBLFFBQVFDLFFBQVEsU0FBUixDQUFaO0FBQ0EsSUFBSUMsU0FBU0QsUUFBUSxpQkFBUixDQUFiO0FBQ0EsSUFBTUUsT0FBTyxNQUFiOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFVBQVNDLEdBQVQsRUFBY0MsUUFBZCxFQUF3QjtBQUN2Q0QsTUFBSUUsR0FBSixDQUFRLGFBQVIsRUFBdUIsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDbkM7QUFDQUgsYUFBU0ksRUFBVCxDQUFZLE1BQVosRUFBb0JDLFVBQXBCLENBQStCLEtBQS9CLEVBQXNDQyxLQUF0QyxDQUE0Q0osSUFBSUssSUFBaEQsRUFBc0QsVUFBU0MsR0FBVCxFQUFjRixLQUFkLEVBQXFCO0FBQ3pFLFVBQUlFLEdBQUosRUFBUztBQUNQTCxZQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsT0FBTyxxQkFBUixFQUFyQjtBQUNELE9BRkQsTUFFTztBQUNMUixZQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0osT0FBT0EsS0FBUixFQUFyQjtBQUNEO0FBQ0YsS0FORDtBQU9ELEdBVEQ7QUFVQVAsTUFBSUUsR0FBSixDQUFRLE9BQVIsRUFBaUIsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDN0I7QUFDQUgsYUFBU0ksRUFBVCxDQUFZLE1BQVosRUFBb0JDLFVBQXBCLENBQStCLEtBQS9CLEVBQXNDTyxJQUF0QyxDQUEyQ1YsSUFBSUssSUFBL0MsRUFBcURNLE9BQXJELENBQTZELFVBQVNMLEdBQVQsRUFBY00sTUFBZCxFQUFzQjtBQUNqRixVQUFJTixHQUFKLEVBQVM7QUFDUEwsWUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLE9BQU8scUJBQVIsRUFBckI7QUFDRCxPQUZELE1BRU87QUFDTFIsWUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCSSxNQUFyQjtBQUNEO0FBQ0YsS0FORDtBQU9ELEdBVEQ7QUFVQWYsTUFBSUUsR0FBSixDQUFRLFdBQVIsRUFBcUIsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDakM7QUFDQSxRQUFNWSxRQUFRLEVBQUUsT0FBTyxJQUFJdEIsTUFBTXVCLFFBQVYsQ0FBbUJkLElBQUllLE1BQUosQ0FBV0MsRUFBOUIsQ0FBVCxFQUFkO0FBQ0F2QixXQUFPd0IsY0FBUDtBQUNBbkIsYUFBU0ksRUFBVCxDQUFZLE1BQVosRUFBb0JDLFVBQXBCLENBQStCLEtBQS9CLEVBQXNDZSxPQUF0QyxDQUE4Q0wsS0FBOUMsRUFBcUQsVUFBQ1AsR0FBRCxFQUFNYSxJQUFOLEVBQWU7QUFDbEUsVUFBSWIsR0FBSixFQUFTO0FBQ1BMLFlBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxPQUFPLHFCQUFSLEVBQXJCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xSLFlBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQlcsSUFBckI7QUFDRDtBQUNGLEtBTkQ7QUFPRCxHQVhEO0FBWUF0QixNQUFJdUIsSUFBSixDQUFTLE9BQVQsRUFBa0IsVUFBQ3BCLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQzlCO0FBQ0EsUUFBSTtBQUNGLFVBQU1vQixNQUFNckIsSUFBSUssSUFBaEI7QUFDQSxVQUFHLEVBQUUsT0FBT2dCLElBQUlDLElBQVgsS0FBb0IsUUFBdEIsQ0FBSCxFQUNFN0IsT0FBTzhCLFFBQVAsQ0FBZ0IsbUNBQWhCO0FBQ0YsVUFBRyxFQUFFLE9BQU9GLElBQUlHLFdBQVgsS0FBMkIsUUFBN0IsQ0FBSCxFQUNFL0IsT0FBTzhCLFFBQVAsQ0FBZ0IsNENBQWhCO0FBQ0YsVUFBRyxFQUFFLE9BQU9GLElBQUlJLE9BQVgsS0FBdUIsU0FBekIsQ0FBSCxFQUNFaEMsT0FBTzhCLFFBQVAsQ0FBZ0IseUNBQWhCO0FBQ0ZGLFVBQUlLLFNBQUosR0FBZ0JDLEtBQUtDLEdBQUwsRUFBaEI7QUFDQVAsVUFBSVEsU0FBSixHQUFnQm5DLElBQWhCO0FBQ0EyQixVQUFJUyxVQUFKLEdBQWlCSCxLQUFLQyxHQUFMLEVBQWpCO0FBQ0FQLFVBQUlVLFVBQUosR0FBaUJyQyxJQUFqQjs7QUFFQUQsYUFBT3dCLGNBQVA7QUFDQW5CLGVBQVNJLEVBQVQsQ0FBWSxNQUFaLEVBQW9CQyxVQUFwQixDQUErQixLQUEvQixFQUFzQzZCLE1BQXRDLENBQTZDWCxHQUE3QyxFQUFrRCxVQUFDZixHQUFELEVBQU1NLE1BQU4sRUFBaUI7QUFDakUsWUFBSU4sR0FBSixFQUFTO0FBQ1BMLGNBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQixFQUFDQyxPQUFPSCxHQUFSLEVBQXJCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xMLGNBQUlNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQkksT0FBT3FCLEdBQVAsQ0FBVyxDQUFYLENBQXJCO0FBQ0Q7QUFDRixPQU5EO0FBT0QsS0FyQkQsQ0FzQkEsT0FBTUMsQ0FBTixFQUFTO0FBQ1BqQyxVQUFJTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsRUFBQ0MsT0FBT3lCLEVBQUVDLE9BQVYsRUFBckI7QUFDRDtBQUNGLEdBM0JEO0FBNEJBdEMsTUFBSXVCLElBQUosQ0FBUyxXQUFULEVBQXNCLFVBQUNwQixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNsQ0EsUUFBSW1DLFVBQUosQ0FBZSxHQUFmO0FBQ0QsR0FGRDtBQUdBdkMsTUFBSXdDLEdBQUosQ0FBUSxXQUFSLEVBQXFCLFVBQUNyQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNqQztBQUNBLFFBQU1vQixNQUFNckIsSUFBSUssSUFBaEI7QUFDQSxRQUFNUSxRQUFRLEVBQUUsT0FBTyxJQUFJdEIsTUFBTXVCLFFBQVYsQ0FBbUJkLElBQUllLE1BQUosQ0FBV0MsRUFBOUIsQ0FBVCxFQUFkO0FBQ0EsUUFBTXNCLFlBQVl0QyxJQUFJSyxJQUF0QjtBQUNBLFFBQUcsRUFBRSxPQUFPZ0IsSUFBSUMsSUFBWCxLQUFvQixRQUF0QixDQUFILEVBQ0U3QixPQUFPOEIsUUFBUCxDQUFnQixtQ0FBaEI7QUFDRixRQUFHLEVBQUUsT0FBT0YsSUFBSUcsV0FBWCxLQUEyQixRQUE3QixDQUFILEVBQ0UvQixPQUFPOEIsUUFBUCxDQUFnQiw0Q0FBaEI7QUFDRixRQUFHLEVBQUUsT0FBT0YsSUFBSUksT0FBWCxLQUF1QixTQUF6QixDQUFILEVBQ0VoQyxPQUFPOEIsUUFBUCxDQUFnQix5Q0FBaEI7O0FBRUY5QixXQUFPd0IsY0FBUDtBQUNBcUIsY0FBVVIsVUFBVixHQUF1QkgsS0FBS0MsR0FBTCxFQUF2QjtBQUNBVSxjQUFVUCxVQUFWLEdBQXVCckMsSUFBdkI7QUFDQSxRQUFNNkMsU0FBUyxFQUFFQyxNQUFNRixTQUFSLEVBQWY7O0FBRUF4QyxhQUFTSSxFQUFULENBQVksTUFBWixFQUFvQkMsVUFBcEIsQ0FBK0IsS0FBL0IsRUFBc0NzQyxTQUF0QyxDQUFnRDVCLEtBQWhELEVBQXVEMEIsTUFBdkQsRUFBK0QsVUFBQ2pDLEdBQUQsRUFBTU0sTUFBTixFQUFpQjtBQUM5RSxVQUFJTixHQUFKLEVBQVM7QUFDUEwsWUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLE9BQU8scUJBQVIsRUFBckI7QUFDRCxPQUZELE1BRU87QUFDTFIsWUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNrQyxjQUFjOUIsT0FBT0EsTUFBUCxDQUFjK0IsQ0FBN0IsRUFBckI7QUFDRDtBQUNGLEtBTkQ7QUFPRCxHQXhCRDtBQXlCQTlDLE1BQUkrQyxNQUFKLENBQVcsV0FBWCxFQUF3QixVQUFDNUMsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDcEM7QUFDQSxRQUFNWSxRQUFRLEVBQUUsT0FBTyxJQUFJdEIsTUFBTXVCLFFBQVYsQ0FBbUJkLElBQUllLE1BQUosQ0FBV0MsRUFBOUIsQ0FBVCxFQUFkO0FBQ0FsQixhQUFTSSxFQUFULENBQVksTUFBWixFQUFvQkMsVUFBcEIsQ0FBK0IsS0FBL0IsRUFBc0MwQyxTQUF0QyxDQUFnRGhDLEtBQWhELEVBQXVELFVBQUNQLEdBQUQsRUFBTU0sTUFBTixFQUFpQjtBQUN0RSxVQUFJTixHQUFKLEVBQVM7QUFDUEwsWUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNDLE9BQU8scUJBQVIsRUFBckI7QUFDRCxPQUZELE1BRU87QUFDTFIsWUFBSU0sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLEVBQUNzQyxjQUFjbEMsT0FBT0EsTUFBUCxDQUFjK0IsQ0FBN0IsRUFBckI7QUFDRDtBQUNGLEtBTkQ7QUFPRCxHQVZEO0FBV0QsQ0FwR0Q7QUFxR0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiam9iX3JvdXRlcy5qcyIsInNvdXJjZVJvb3QiOiJEOi9GaWxlcy9wZW9uL2FwcC9yb3V0ZXMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByb3V0ZXMvam9iX3JvdXRlcy5qc1xyXG52YXIgbW9uZ28gPSByZXF1aXJlKCdtb25nb2RiJyk7XHJcbnZhciBtdXJyb3IgPSByZXF1aXJlKCcuLi90b29scy9tdXJyb3InKTtcclxuY29uc3QgdXNlciA9IFwidGVzdFwiO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcHAsIGRiY2xpZW50KSB7XHJcbiAgYXBwLmdldCgnL2pvYnMvY291bnQnLCAocmVxLCByZXMpID0+IHtcclxuICAgIC8vZ2V0IGpvYnMgY291bnRcclxuICAgIGRiY2xpZW50LmRiKCdwZW9uJykuY29sbGVjdGlvbignam9iJykuY291bnQocmVxLmJvZHksIGZ1bmN0aW9uKGVyciwgY291bnQpIHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKHtlcnJvcjogXCJOb3QgYWJsZSB0byBwcm9jZXNzXCJ9KTtcclxuICAgICAgfSBlbHNlIHsgICAgICAgIFxyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtjb3VudDogY291bnR9KTtcclxuICAgICAgfSBcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGFwcC5nZXQoJy9qb2JzJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAvL2dldCBhbGwgam9ic1xyXG4gICAgZGJjbGllbnQuZGIoJ3Blb24nKS5jb2xsZWN0aW9uKCdqb2InKS5maW5kKHJlcS5ib2R5KS50b0FycmF5KGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCh7ZXJyb3I6IFwiTm90IGFibGUgdG8gcHJvY2Vzc1wifSk7XHJcbiAgICAgIH0gZWxzZSB7ICAgICAgICBcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXN1bHQpO1xyXG4gICAgICB9IFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgYXBwLmdldCgnL2pvYnMvOmlkJywgKHJlcSwgcmVzKSA9PiB7ICAgIFxyXG4gICAgLy9nZXQgam9iIGJ5IGlkXHJcbiAgICBjb25zdCB3aGVyZSA9IHsgJ19pZCc6IG5ldyBtb25nby5PYmplY3RJRChyZXEucGFyYW1zLmlkKSB9O1xyXG4gICAgbXVycm9yLmNoZWNrRXJyb3JMaXN0KCk7XHJcbiAgICBkYmNsaWVudC5kYigncGVvbicpLmNvbGxlY3Rpb24oJ2pvYicpLmZpbmRPbmUod2hlcmUsIChlcnIsIGl0ZW0pID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKHtlcnJvcjogXCJOb3QgYWJsZSB0byBwcm9jZXNzXCJ9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChpdGVtKTtcclxuICAgICAgfSBcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGFwcC5wb3N0KCcvam9icycsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgLy9jcmVhdGUgbmV3IGpvYlxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgam9iID0gcmVxLmJvZHk7XHJcbiAgICAgIGlmKCEodHlwZW9mIGpvYi5uYW1lID09PSBcInN0cmluZ1wiKSlcclxuICAgICAgICBtdXJyb3IuYWRkRXJyb3IoXCJQYXJhbWV0ZXIgJ25hbWUnIHNob3VsZCBiZSBzdHJpbmdcIik7XHJcbiAgICAgIGlmKCEodHlwZW9mIGpvYi5kZXNjcmlwdGlvbiA9PT0gXCJzdHJpbmdcIikpXHJcbiAgICAgICAgbXVycm9yLmFkZEVycm9yKFwiUGFyYW1ldGVyICdkZXNjcmlwdGlvbicgc2hvdWxkIGJlIGEgc3RyaW5nXCIpOyAgICAgICAgXHJcbiAgICAgIGlmKCEodHlwZW9mIGpvYi5lbmFibGVkID09PSBcImJvb2xlYW5cIikpXHJcbiAgICAgICAgbXVycm9yLmFkZEVycm9yKFwiUGFyYW1ldGVyICdlbmFibGVkJyBzaG91bGQgYmUgYSBib29sZWFuXCIpOyAgICAgICAgICAgIFxyXG4gICAgICBqb2IuY3JlYXRlZE9uID0gRGF0ZS5ub3coKTsgICAgIFxyXG4gICAgICBqb2IuY3JlYXRlZEJ5ID0gdXNlcjsgICAgICAgXHJcbiAgICAgIGpvYi5tb2RpZmllZE9uID0gRGF0ZS5ub3coKTsgICAgXHJcbiAgICAgIGpvYi5tb2RpZmllZEJ5ID0gdXNlcjtcclxuXHJcbiAgICAgIG11cnJvci5jaGVja0Vycm9yTGlzdCgpO1xyXG4gICAgICBkYmNsaWVudC5kYigncGVvbicpLmNvbGxlY3Rpb24oJ2pvYicpLmluc2VydChqb2IsIChlcnIsIHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHsgXHJcbiAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCh7ZXJyb3I6IGVycn0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXMuc3RhdHVzKDIwMSkuc2VuZChyZXN1bHQub3BzWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goZSkge1xyXG4gICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCh7ZXJyb3I6IGUubWVzc2FnZSB9KTtcclxuICAgIH1cclxuICB9KTtcclxuICBhcHAucG9zdCgnL2pvYnMvOmlkJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICByZXMuc2VuZFN0YXR1cyg0MDUpO1xyXG4gIH0pO1xyXG4gIGFwcC5wdXQoJy9qb2JzLzppZCcsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgLy91cGRhdGUgam9iIGJ5IF9pZFxyXG4gICAgY29uc3Qgam9iID0gcmVxLmJvZHk7XHJcbiAgICBjb25zdCB3aGVyZSA9IHsgJ19pZCc6IG5ldyBtb25nby5PYmplY3RJRChyZXEucGFyYW1zLmlkKSB9O1xyXG4gICAgY29uc3QgbmV3dmFsdWVzID0gcmVxLmJvZHk7XHJcbiAgICBpZighKHR5cGVvZiBqb2IubmFtZSA9PT0gXCJzdHJpbmdcIikpXHJcbiAgICAgIG11cnJvci5hZGRFcnJvcihcIlBhcmFtZXRlciAnbmFtZScgc2hvdWxkIGJlIHN0cmluZ1wiKTtcclxuICAgIGlmKCEodHlwZW9mIGpvYi5kZXNjcmlwdGlvbiA9PT0gXCJzdHJpbmdcIikpXHJcbiAgICAgIG11cnJvci5hZGRFcnJvcihcIlBhcmFtZXRlciAnZGVzY3JpcHRpb24nIHNob3VsZCBiZSBhIHN0cmluZ1wiKTsgICAgICAgIFxyXG4gICAgaWYoISh0eXBlb2Ygam9iLmVuYWJsZWQgPT09IFwiYm9vbGVhblwiKSlcclxuICAgICAgbXVycm9yLmFkZEVycm9yKFwiUGFyYW1ldGVyICdlbmFibGVkJyBzaG91bGQgYmUgYSBib29sZWFuXCIpOyAgICAgICAgICAgXHJcblxyXG4gICAgbXVycm9yLmNoZWNrRXJyb3JMaXN0KCk7ICBcclxuICAgIG5ld3ZhbHVlcy5tb2RpZmllZE9uID0gRGF0ZS5ub3coKTtcclxuICAgIG5ld3ZhbHVlcy5tb2RpZmllZEJ5ID0gdXNlcjtcclxuICAgIGNvbnN0IHVwZGF0ZSA9IHsgJHNldDogbmV3dmFsdWVzfTtcclxuXHJcbiAgICBkYmNsaWVudC5kYigncGVvbicpLmNvbGxlY3Rpb24oJ2pvYicpLnVwZGF0ZU9uZSh3aGVyZSwgdXBkYXRlLCAoZXJyLCByZXN1bHQpID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKHtlcnJvcjogXCJOb3QgYWJsZSB0byBwcm9jZXNzXCJ9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh7aXRlbXNVcGRhdGVkOiByZXN1bHQucmVzdWx0Lm59KVxyXG4gICAgICB9IFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgYXBwLmRlbGV0ZSgnL2pvYnMvOmlkJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAvL2RlbGV0ZSBqb2IgYnkgX2lkXHJcbiAgICBjb25zdCB3aGVyZSA9IHsgJ19pZCc6IG5ldyBtb25nby5PYmplY3RJRChyZXEucGFyYW1zLmlkKSB9O1xyXG4gICAgZGJjbGllbnQuZGIoJ3Blb24nKS5jb2xsZWN0aW9uKCdqb2InKS5kZWxldGVPbmUod2hlcmUsIChlcnIsIHJlc3VsdCkgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoe2Vycm9yOiBcIk5vdCBhYmxlIHRvIHByb2Nlc3NcIn0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtpdGVtc0RlbGV0ZWQ6IHJlc3VsdC5yZXN1bHQubn0pXHJcbiAgICAgIH0gXHJcbiAgICB9KTtcclxuICB9KTsgICAgXHJcbn07XHJcbi8vVE9ET1xyXG4vL3VzZXIgaGFuZGxpbmdcclxuLy9yZXR1cm4gbXVsdGlwbGUgZXJyb3JzXHJcbi8vc2VsZWN0b3JzIGZvciBqb2IgbGlzdCAtIHByb3RlY3QgZnJvbSBpbmplY3Rpb24iXX0=